// all mixins are collected here

// bootstrap mixins
@import "../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins";

// font awesome mixins
// this is not necessary if you import the font-awesome sass code
// in style.scss
// @import "../../bower_components/fontawesome/scss/mixins";

// if you need compass mixins uncomment this
// or fine tune the path to the exact mixin file you need
//@import "../../bower_components/compass-mixins/lib/compass/css3"

// import any mixin libraries from the generic directory,
// @import "generic/mymixins.scss";

// or define mixins here …
@mixin responsive-image {
  display: block;
  width: auto;
  height: auto;
  max-width: 100%;
}

@mixin center {
  display: block;
  margin: 0 auto;
}

// hides the content of the element
// and instead shows a font-icon
@mixin icon($char: "") {
  font-size: 1px;
  line-height: $line-height-computed;
  letter-spacing: -1px;
  color: transparent;
  display: inline-block;
  &:before {
    @include fa-icon;
    vertical-align: middle;
    color: $text-color;
    font-size: $font-size-base;
    content: $char;
    line-height: 1;
  }
}

// shows an icon before an element
// vertically aligned on the baseline
// with a $margin to the content (default 0.25em)
@mixin icon-before($char: "", $margin: 0.25em) {
  display: inline-block;
  vertical-align: baseline;
  &:before {
    @include fa-icon;
    margin-right: $margin;
    vertical-align: baseline;
    content: $char;
  }
}

// shows an icon after an element
// vertically aligned on the baseline
// with a $margin to the content (default 0.25em)
@mixin icon-after($char: "", $margin: 0.25em) {
  display: inline-block;
  vertical-align: baseline;
  &:after {
    @include fa-icon;
    margin-left: $margin;
    vertical-align: baseline;
    content: $char;
  }
}

// define .form-control as mixin so we can apply it without
// generating ugly css
@mixin form-control {
  display: block;
  width: 100%;
  height: $input-height-base;
  // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  padding: $padding-base-vertical $padding-base-horizontal;
  font-size: $font-size-base;
  line-height: $line-height-base;
  color: $input-color;
  background-color: $input-bg;
  background-image: none;
  // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: 1px solid $input-border;
  border-radius: $input-border-radius;
  // Note: This has no effect on <select>s in some browsers, due to the limited stylability of <select>s in CSS.
  @include box-shadow(inset 0 1px 1px rgba(0, 0, 0, 0.075));
  @include transition(border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s);
  // Customize the `:focus` state to imitate native WebKit styles.
  @include form-control-focus;
  // Placeholder
  @include placeholder;
  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    background-color: $input-bg-disabled;
    opacity: 1;
    // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655

  }
  &[disabled],
  fieldset[disabled] & {
    cursor: $cursor-disabled;
  }
  // [converter] extracted textarea& to textarea.form-control
}

@mixin larger-than($breakpoint) {
  @media (min-width: $breakpoint) {
    @content;
  }
}

@mixin smaller-than($breakpoint) {
  @media (max-width: $breakpoint) {
    @content;
  }
}

@mixin antialias {
  -webkit-font-smoothing: antialiased;
  -moz-­osx-­font-­smoothing: grayscale;
}

@mixin content-box($color: $color-blue) {
  padding: $vertical-gutter-width/2 $grid-gutter-width/2;
  background-color: $color-white;
  border-top: $title-underline-height solid $color;
  > h1,
  > h2,
  > h3 {
    margin-top: 0;
  }
  @include larger-than($screen-sm-min) {
    padding: $vertical-gutter-width $grid-gutter-width;
  }
}

@mixin calc($property, $expression) {
  #{$property}: -webkit-calc(#{$expression});
  #{$property}:    -moz-calc(#{$expression});
  #{$property}:         calc(#{$expression});
}

// Small triangles
@mixin triangle-base() {
  position: absolute;
  content: "";
  width: 0;
  height: 0;
  z-index: 1;
}

@mixin triangle-down($color: $brand-primary, $size: 15px) {
  @include triangle-base();
  border-left: $size solid transparent;
  border-right: $size solid transparent;
  border-top: $size solid $color;
}

@mixin triangle-up($color: $brand-primary, $size: 15px) {
  @include triangle-base();
  border-left: $size solid transparent;
  border-right: $size solid transparent;
  border-bottom: $size solid $color;
}

@mixin triangle-right($color: $brand-primary, $size: 15px) {
  @include triangle-base();
  border-top: $size solid transparent;
  border-bottom: $size solid transparent;
  border-left: $size solid $color;
}

@mixin triangle-left($color: $brand-primary, $size: 15px) {
  @include triangle-base();
  border-top: $size solid transparent;
  border-bottom: $size solid transparent;
  border-right: $size solid $color;
}
